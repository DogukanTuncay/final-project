---
description: Laravel Rules For Cursor
globs: 
alwaysApply: true
---

  You are an expert in Laravel, PHP, and related web development technologies.
# Önemli notlar :
Hiçbir zaman terminal komutları çalıştırma.
# Proje Genel Yapısı
## 1.1 Teknoloji Stack'i
Backend: Laravel 11.x
Veritabanı: PostgreSQL
Cache: Redis
API: RESTful
Authentication: JWT
Dil Yönetimi: Spatie Laravel Translatable
Yetkilendirme: Laravel Gates & Policies
Validation: Laravel Request Validation

## 1.2. Klasör Yapısı
project/
├── app/
│   ├── Console/
│   |
│   ├── Exceptions/
│   ├── Http/
│   │   ├── Controllers/
│   │   │   ├── Admin/
│   │   │   └── Api/
│   │   ├── Middleware/
│   │   ├── Requests/
│   │   │   └── Admin/
│   │   └── Resources/
│   │       └── Admin/
│   ├── Interfaces/
│   │   ├── Repositories/
│   │   │   └── Admin/
|   |   |   └── Api/
│   │   └── Services/
│   │       └── Admin/
|   |       └── Api/
│   ├── Models/
│   ├── Providers/
│   ├── Repositories/
│   │       └── Admin/
|   |       └── Api/
│   └── Services/
│   │       └── Admin/
|   |       └── Api/
├── config/
├── database/
│   ├── factories/
│   ├── migrations/
│   └── seeders/
├── resources/
│   ├── lang/
│   │   ├── tr/
│   │   └── en/
│   └── views/
├── routes/
│   ├── admin.php
│   └── api.php
├── storage/
│   └── app/
│       └── public/
└── tests/

## 1.3 Temel Prensipler
SOLID prensipleri
Repository Pattern
Service Pattern
Interface Driven Development
Clean Code
DRY (Don't Repeat Yourself)
KISS (Keep It Simple, Stupid)



# 2. Mimari Yapı
##  2.1 Katmanlı Mimari


A[Controller] --> B[Service]
    B --> C[Repository]
    C --> D[Model]
    D --> E[Database]

##  2.2 Service Provider Yapılandırması


private function bindAllInterfaces(): void
{
    $namespaces = ['Admin', 'Api', 'Auth']; // Admin, API ve Auth için

    // Repositories bağlama işlemi
    foreach ($namespaces as $namespace) {
        $repositoryInterfaces = $this->getInterfaces("Repositories/{$namespace}");

        foreach ($repositoryInterfaces as $interface) {
            $modelName = str_replace('RepositoryInterface', '', class_basename($interface));
            $concreteClass = "App\\Repositories\\{$namespace}\\{$modelName}Repository";

            if (class_exists($concreteClass)) {
                $this->app->bind(
                    "App\\Interfaces\\Repositories\\{$namespace}\\{$modelName}RepositoryInterface",
                    $concreteClass
                );
            }
        }
    }

    // Services bağlama işlemi
    foreach ($namespaces as $namespace) {
        $serviceInterfaces = $this->getInterfaces("Services/{$namespace}");

        foreach ($serviceInterfaces as $interface) {
            $modelName = str_replace('ServiceInterface', '', class_basename($interface));
            $concreteClass = "App\\Services\\{$namespace}\\{$modelName}Service";

            if (class_exists($concreteClass)) {
                $this->app->bind(
                    "App\\Interfaces\\Services\\{$namespace}\\{$modelName}ServiceInterface",
                    $concreteClass
                );
            }
        }
    }
}


    /**
     * Belirtilen interface klasöründeki tüm interface'leri al
     */
    private function getInterfaces(string $type): array
    {
        $path = app_path("Interfaces/{$type}");
        
        if (!File::isDirectory($path)) {
            return [];
        }

        $files = File::files($path);
        
        return array_map(function ($file) use ($type) {
            return 'App\\Interfaces\\' . $type . '\\' . pathinfo($file->getFilename(), PATHINFO_FILENAME);
        }, $files);
    }

## 3.1 Model Gereksinimleri Örneği :

    /**
     * Çevirilecek alanlar
     */
    public $translatable

    /**
     * Toplu atama yapılabilecek alanlar
     */
    protected $fillable

     /**
     * Veri tipi dönüşümleri
     */
    protected $casts

     /**
     * Otomatik eklenen özellikler
     */
    protected $appends

## 3.2 Base Api Response Traiti :

trait ApiResponseTrait
{
    protected function successResponse($data = [], string $messageKey = null, int $status = 200, array $messageParams = [])
    {
        $message = $messageKey ? __($messageKey, $messageParams) : 'Success';
        
        return response()->json([
            'status' => 'success',
            'message' => $message,
            'data' => $data
        ], $status);
    }

    protected function errorResponse(string $messageKey, int $status = 400, $errors = [], array $messageParams = [])
    {
        $message = __($messageKey, $messageParams);
        
        return response()->json([
            'status' => 'error',
            'message' => $message,
            'errors' => $errors
        ], $status);
    }
}

# 4. Make Full Model Command :
php artisan make:full-model komutu ile tüm interfaceler, repositoryler, controller, service hepsi otomatik oluşuyor hem api hem admin için. Bundan sonra ise bize içeriklerini doldurması kalıyor. Bu kısım tamamen sana ait.
### Bu kurallara göre uygun yapıda ve her zaman sistem mimarisine uygun çalışacak şekilde çıktı vermeye çalış. 

